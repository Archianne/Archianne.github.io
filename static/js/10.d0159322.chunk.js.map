{"version":3,"sources":["theme/theme.js","App.jsx","components/_Hooks/useLocalStorage.js"],"names":["themes","light","bg","boxBorder","line","fontColor1","fontColor2","navBg","navInputBg","navInputFocus","navFontColor","navFontColor2","navInputColor","navBorder","navBorder2","statusBg","spamFontColor","buttonBg","buttonBgHover","buttonBorderHover","numBg","active","dark","lines","NavBar","lazy","Main","GlobalStyle","App","useLocalStorage","theme","setTheme","changeTheme","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify"],"mappings":"kJA+DeA,EALA,CACbC,MA3DiB,CACjBC,GAAI,UACJC,UAAW,UACXC,KAAM,UACNC,WAAY,UACZC,WAAY,UAGZC,MAAO,UACPC,WAAY,UACZC,cAAe,UACfC,aAAc,UACdC,cAAe,UACfC,cAAe,UACfC,UAAW,UACXC,WAAY,UAGZC,SAAU,UACVC,cAAe,UACfC,SAAU,UACVC,cAAe,UACfC,kBAAmB,UAGnBC,MAAO,UACPC,OAAQ,WAkCRC,KA/BgB,CAChBpB,GAAI,UACJC,UAAW,UACXoB,MAAO,UACPlB,WAAY,UACZC,WAAY,UAGZC,MAAO,UACPC,WAAY,UACZC,cAAe,UACfC,aAAc,UACdC,cAAe,UACfC,cAAe,UACfC,UAAW,UACXC,WAAY,UAGZC,SAAU,UACVC,cAAe,UACfC,SAAU,UACVC,cAAe,UACfC,kBAAmB,UAGnBC,MAAO,UACPC,OAAQ,Y,OClDJG,EAASC,gBAAK,kBAAM,uDACpBC,EAAOD,gBAAK,kBAAM,gCAClBE,EAAcF,gBAAK,kBAAM,gCAiBhBG,UAfH,WACV,MAA0BC,YAAgB,QAAS,QAAnD,mBAAOC,EAAP,KAAcC,EAAd,KAKA,OACE,eAAC,IAAD,CAAeD,MAAO9B,EAAO8B,GAA7B,UACE,cAACH,EAAD,IACA,cAACH,EAAD,CAAQQ,YAPQ,WACCD,EAAT,SAAVD,EAA4B,QAAoB,WAO9C,cAACJ,EAAD,S,mDCMSG,IAvBS,SAACI,EAAKC,GAC5B,MAAsCC,oBAAS,WAC7C,IACE,IAAMC,EAAOC,OAAOC,aAAaC,QAAQN,GACzC,OAAOG,EAAOI,KAAKC,MAAML,GAAQF,EACjC,MAAOQ,GAEP,OADAC,QAAQC,IAAIF,GACLR,MANX,mBAAOW,EAAP,KAAoBC,EAApB,KAmBA,MAAO,CAACD,EAVS,SAACE,GAChB,IACE,IAAMC,EACJD,aAAiBE,SAAWF,EAAMF,GAAeE,EACnDD,EAAeE,GACfX,OAAOC,aAAaY,QAAQjB,EAAKO,KAAKW,UAAUH,IAChD,MAAON,GACPC,QAAQC,IAAIF","file":"static/js/10.d0159322.chunk.js","sourcesContent":["const LightTheme = {\r\n  bg: \"#ffffff\",\r\n  boxBorder: \"#E1E4E8\",\r\n  line: \"#EBEDEF\",\r\n  fontColor1: \"#24292E\",\r\n  fontColor2: \"#6B727A\",\r\n\r\n  //navbar\r\n  navBg: \"#24292E\",\r\n  navInputBg: \"#24292E\",\r\n  navInputFocus: \"#FFFFFF\",\r\n  navFontColor: \"#FFFFFF\",\r\n  navFontColor2: \"#24292E\",\r\n  navInputColor: \"#B7C3C5\",\r\n  navBorder: \"#444D56\",\r\n  navBorder2: \"#0366D6\",\r\n\r\n  //sidebar\r\n  statusBg: \"#FFFFFF\",\r\n  spamFontColor: \"#24292E\",\r\n  buttonBg: \"#FAFBFC\",\r\n  buttonBgHover: \"#f3f4f6\",\r\n  buttonBorderHover: \"#E1E4E8\",\r\n\r\n  //content_navbar\r\n  numBg: \"#E8EAEC\",\r\n  active: \"#f9826c\",\r\n};\r\n\r\nconst DarkTheme = {\r\n  bg: \"#0D1117\",\r\n  boxBorder: \"#30363D\",\r\n  lines: \"#21262D\",\r\n  fontColor1: \"#C9D1D9\",\r\n  fontColor2: \"#808892\",\r\n\r\n  //navbar\r\n  navBg: \"#161B22\",\r\n  navInputBg: \"#0D1117\",\r\n  navInputFocus: \"#0D1117\",\r\n  navFontColor: \"#F0F6FC\",\r\n  navFontColor2: \"#C2C3C5\",\r\n  navInputColor: \"#C2C3C5\",\r\n  navBorder: \"#21262D\",\r\n  navBorder2: \"#0366D6\",\r\n\r\n  //sidebar\r\n  statusBg: \"#0D1117\",\r\n  spamFontColor: \"#FFFFFF\",\r\n  buttonBg: \"#21262D\",\r\n  buttonBgHover: \"#30363d\",\r\n  buttonBorderHover: \"#8b949e\",\r\n\r\n  //content_navbar\r\n  numBg: \"#262C32\",\r\n  active: \"#f9826c\",\r\n};\r\n\r\nconst themes = {\r\n  light: LightTheme,\r\n  dark: DarkTheme,\r\n};\r\n\r\nexport default themes;","import React, { lazy } from \"react\";\nimport { ThemeProvider } from \"styled-components\";\nimport useLocalStorage from \"./components/_Hooks/useLocalStorage\";\nimport themes from \"./theme/theme\";\n\nconst NavBar = lazy(() => import(\"./components/NavBar\"));\nconst Main = lazy(() => import(\"./components/Main\"));\nconst GlobalStyle = lazy(() => import(\"./theme/globalStyle\"));\n\nconst App = () => {\n  const [theme, setTheme] = useLocalStorage(\"theme\", \"dark\");\n  const changeTheme = () => {\n    theme === \"dark\" ? setTheme(\"light\") : setTheme(\"dark\");\n  };\n\n  return (\n    <ThemeProvider theme={themes[theme]}>\n      <GlobalStyle />\n      <NavBar changeTheme={changeTheme} />\n      <Main />\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { useState } from \"react\";\r\n\r\nconst useLocalStorage = (key, initialValue) => {\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      const item = window.localStorage.getItem(key);\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n  const setValue = (value) => {\r\n    try {\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n      setStoredValue(valueToStore);\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  return [storedValue, setValue];\r\n};\r\n\r\nexport default useLocalStorage;\r\n"],"sourceRoot":""}